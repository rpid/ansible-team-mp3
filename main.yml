---
- hosts: db
  become: yes
  tasks:
    - name: Start message
      debug:
        msg: 'Create task to install and preparing DB server'

    - name: Install MariaDB
      apt:
        name:
          - mariadb-server
          - python3-pymysql
        update_cache: yes

    - name: Start MariaDB service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Create database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        collation: utf8_general_ci
        encoding: utf8
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: true

    - name: Create database user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        priv: "{{ db_name }}.*:ALL"
        host: "{{ db_host }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: mariadb_user

- hosts: server
  become: true
  vars:
    domain: app-for-devops
    app_path: /var/www/app-for-devops
    db_host: "{{ db_host }}"
    db_name: "{{ db_name }}"
    db_user: "{{ db_user }}"
    db_pass: "{{ db_pass }}"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Apache web server
      apt:
        name: apache2
        state: present

    - name: Add php repository
      ansible.builtin.apt_repository:
        repo: ppa:ondrej/php
        state: present

    - name: Install PHP and required modules
      apt:
        name: 
          - php8.2
          - php8.2-cli
          - libapache2-mod-php
          - php8.2-mysql
          - php8.2-mbstring
          - php8.2-xml
          - php8.2-curl
        state: present

    - name: Clone application repository
      git:
        repo: https://github.com/Practical-DevOps/app-for-devops.git
        dest: "{{ app_path }}"
        force: yes
        version: main

    - name: Install Composer
      apt:
        name: composer
        state: present

    - name: Run composer install
      command: composer install --working-dir="{{ app_path }}"
      environment:
        COMPOSER_HOME: /root/.composer
        COMPOSER_ALLOW_ROOT: 1

    - name: Copy .env.example to .env
      command: cp {{ app_path }}/.env.example {{ app_path }}/.env

    - name: Generate application key
      command: php artisan key:generate
      args:
        chdir: "{{ app_path }}"
    
    - name: set DB_DATABASE
      lineinfile: dest={{ app_path }}/.env regexp='^DB_DATABASE=' line=DB_DATABASE={{ db_name }}

    - name: set DB_USERNAME
      lineinfile: dest={{ app_path }}/.env regexp='^DB_USERNAME=' line=DB_USERNAME={{ db_user }}

    - name: set DB_PASSWORD
      lineinfile: dest={{ app_path }}/.env regexp='^DB_PASSWORD=' line=DB_PASSWORD={{ db_pass }}

    - name: Run database migrations
      command: php artisan migrate
      args:
        chdir: "{{ app_path }}"

    - name: Set permissions for user www-data
      ansible.builtin.file:
        path: "{{ app_path }}"
        owner: www-data
        group: www-data
        mode: 0755
        recurse: yes

    - name: enabled mod_rewrite
      apache2_module:
        state: present
        name: rewrite
      notify:
        - restart apache2

    - name: Change apache2 virtualhost
      lineinfile: dest=/etc/apache2/sites-available/000-default.conf regexp="*DocumentRoot" line="DocumentRoot /var/www/app-for-devops/public"
      notify:
        - restart apache2
        
    - name: create virtual host file
      template: src=000-default.conf dest=/etc/apache2/sites-available/000-default.conf
      notify:
        - restart apache2

    - name: Install Node.js and NPM
      apt:
        name:
          - nodejs
          - npm
        state: present

    - name: Build frontend assets
      command: npm run build
      args:
        chdir: "{{ app_path }}"

  handlers:
    - name: restart apache2
      service: name=apache2 state=restarted
