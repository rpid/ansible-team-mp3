---
- hosts: db
  become: yes
  vars_files:
    - vars/db_vars.yml
  tasks:
    - name: Start message
      debug:
        msg: 'Create task to install and preparing DB server'

    - name: Generate random passwords for database
      set_fact:
        db_root_password: "{{ lookup('community.general.random_string', length=16) }}"
        db_user_password: "{{ lookup('community.general.random_string', length=16) }}"
      when: lookup('env', 'CI') == 'true'

    - name: Install MariaDB
      apt:
        name:
          - mariadb-server
          - python3-pymysql
        update_cache: yes

    - name: Start MariaDB service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Secure MariaDB installation
      mysql_user:
        name: root
        password: "{{ db_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        check_implicit_admin: yes
        host: localhost
        priv: "*.*:ALL,GRANT OPTION"
      tags: mariadb_secure

    - name: Create database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        collation: utf8_general_ci
        encoding: utf8
        login_user: root
        login_password: "{{ db_root_password }}"

    - name: Create database user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_user_password }}"
        priv: "{{ db_name }}.*:ALL"
        host: localhost
        login_user: root
        login_password: "{{ db_root_password }}"
      tags: mariadb_user

- hosts: server
  become: true
  vars:
    app_path: /var/www/html/app-for-devops
    db_host: "{{ db_host }}"
    db_name: "{{ db_name }}"
    db_user: "{{ db_user }}"
    db_pass: "{{ db_user_password }}"
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Apache web server
      apt:
        name: apache2
        state: present

    - name: Install PHP and required modules
      apt:
        name: 
          - php
          - libapache2-mod-php
          - php-mysql
          - php-mbstring
          - php-xml
        state: present

    - name: Enable Apache modules
      apache2_module:
        state: present
        name: "{{ item }}"
      loop:
        - rewrite
        - ssl

    - name: Clone application repository
      git:
        repo: https://github.com/Practical-DevOps/app-for-devops.git
        dest: "{{ app_path }}"
        version: main

    - name: Set permissions for application directory
      file:
        path: "{{ app_path }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Install Composer
      apt:
        name: composer
        state: present

    - name: Run composer install
      command: composer install --working-dir="{{ app_path }}"
      environment:
        COMPOSER_HOME: /root/.composer

    - name: Copy .env.example to .env
      command: cp {{ app_path }}/.env.example {{ app_path }}/.env
      args:
        creates: "{{ app_path }}/.env"

    - name: Generate application key
      command: php artisan key:generate
      args:
        chdir: "{{ app_path }}"

    - name: Run database migrations
      command: php artisan migrate --force
      args:
        chdir: "{{ app_path }}"

    - name: Install Node.js and NPM
      apt:
        name:
          - nodejs
          - npm
        state: present

    - name: Install frontend dependencies
      command: npm install --working-dir="{{ app_path }}"
      environment:
        PATH: "/usr/bin:/bin:/usr/local/bin"

    - name: Build frontend assets
      command: npm run build --working-dir="{{ app_path }}"
      environment:
        PATH: "/usr/bin:/bin:/usr/local/bin"

    - name: Restart Apache service
      service:
        name: apache2
        state: restarted
